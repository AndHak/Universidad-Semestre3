"""
    PROJECT: Evaluaci√≥n 1 / Grupo 2

    MODULE: empresa_transporte.py

    DESCRIPTION:
    Construir un programa que permita administrar los veh√≠culos de pasajeros
    que se encuentran adscritos a una Empresa de Transporte

    AUTHOR: Andr√©s Felipe Mart√≠nez Guerra
"""


class VehiculoPasajeros:
    """Un veh√≠culo de pasajeros se caracteriza porque maneja un n√∫mero √∫nico de
    registro, la marca, la capacidad m√°xima de pasajeros y el n√∫mero de
    viajes realizado. Hay que tener en cuenta que el n√∫mero de viajes realizado
    se inicializa en el constructor de forma autom√°tica a cero (0) y que la
    capacidad m√°xima por defecto es de diez (10) pasajeros
    """

    # M√©todo constructor a ser implementado
    def __init__(self, cod_registro, marca, capacidad_maxima=10):
        self.cod_registro = cod_registro
        self.marca = marca
        self.capacidad_maxima = capacidad_maxima
        self.numero_de_viajes = 0

    # M√©todo VH # 1
    def __eq__(self, otro_vp):
        """M√©todo de comparaci√≥n de un veh√≠culo de pasajeros, teniendo en
        cuenta el n√∫mero √∫nico de registro, la marca y la capacidad m√°xima de
        pasajeros

        Parameters
        ----------
        otro_vp : VehiculoPasajeros
            El otro veh√≠culo de pasajeros con el cual se van a ser las
            comparaciones

        Returns
        -------
        bool
            True si los veh√≠culos de pasajeros son iguales. False en caso
        contrario
        """
        if otro_vp.cod_registro == self.cod_registro and otro_vp.marca == self.marca and otro_vp.capacidad_maxima == self.capacidad_maxima:
            return True
        else:
            return False
        

    # M√©todo VH # 2
    def __repr__(self):
        """M√©todo de presentaci√≥n del veh√≠culo de pasajeros

        Returns
        -------
        str
            Una cadena con el formato:
                "[NUR:marca:capacidad_m√°xima:n√∫mero_de_viajes]"
            Ejemplo:
                "[836-7:Chevrolet:25:170]"
        """
        return f"[{self.cod_registro}:{self.marca}:{self.capacidad_maxima}:{self.numero_de_viajes}]"


class EmpresaTransporte:
    """La Empresa de Transporte se caracteriza por tener un NIT, un nombre, un
    n√∫mero m√°ximo de veh√≠culos para su flota y el listado de todos los
    veh√≠culos de pasajeros registrados (flota de veh√≠culos de la empresa).
    """

    # M√©todo constructor a ser implementado
    def __init__(self, nit, nombre, max_vehiculos):
        self.nit = nit
        self.nombre = nombre
        self.max_vehiculos = max_vehiculos
        self.vehiculos_registrados = []

    # M√©todo ET # 1
    def vincular_VP(self, nuevo_vp):
        """Este m√©todo intenta registrar un veh√≠culo de pasajeros a la flota de
        veh√≠culos de la empresa. Hay que tener en cuenta que no se podr√°
        registrar el mismo veh√≠culo de pasajeros 2 veces o m√°s y que se debe
        comprobar que con el nuevo veh√≠culo no se sobrepase el l√≠mite del
        n√∫mero m√°ximo de veh√≠culos de la flota. Tambien es necesario validar la
        Autenticidad del n√∫mero de registro √∫nico del veh√≠culo a registrar,
        teniendo en cuenta que este n√∫mero consta de 2 partes:

                "n√∫mero registro b√°sico-d√≠gito de verificaci√≥n"

        donde el "d√≠gito de verificaci√≥n" es un valor igual al res√≠duo o m√≥dulo
        de la suma de los d√≠gitos del n√∫mero de registro b√°sico entre diez (10)
        Ejm. Si el n√∫mero de registro de un veh√≠culo es "836-7" entonces para
        validar su AUTENTICIDAD sumamos 8 + 3 + 6 = 17 y a este resultado le
        sacamos el m√≥dulo entre 10, obteniendo como valor el 7. Por lo tanto el
        n√∫mero de registro de identificaci√≥n "836-7" es AUT√âNTICO.

        Parameters
        ----------
        nuevo_vp : VehiculoPasajeros
            El nuevo veh√≠culo de pasajeros para ser adicionado a la flota de
            veh√≠culos de la empresa

        Returns
        -------
        bool
            True si el nuevo veh√≠culo es registrado por la empresa. False en
            caso contrario
        """
        suma = 0
        for digito in nuevo_vp.cod_registro[:-2]:  
            suma += int(digito)
        while suma % 10 != int(nuevo_vp.cod_registro[-1]):
            return False

        for vehiculo_registrado in self.vehiculos_registrados:
            if vehiculo_registrado.cod_registro == nuevo_vp.cod_registro:
                return False

        if len(self.vehiculos_registrados) + 1 > self.max_vehiculos:
            return False
        else:
            self.vehiculos_registrados.append(nuevo_vp)
            return True

    # M√©todo ET # 2
    def posicionar_VP(self, nuevo_vp, pos):
        """Este m√©todo intenta ingresar un nuevo veh√≠culo de pasajeros, en una
        determinada posici√≥n dentro de la flota de veh√≠culos de la empresa. Al
        igual que en el m√©todo anterior, hay que tener en cuenta que no se
        podr√° registrar el mismo veh√≠culo de pasajeros 2 veces o m√°s, que no se
        sobrepase el l√≠mite del n√∫mero m√°ximo de veh√≠culos de la flota y
        tambi√©n ser√° necesario validar la Autenticidad del n√∫mero de registro
        √∫nico del veh√≠culo a registrar

        Parameters
        ----------
        nuevo_vp : VehiculoPasajeros
            El nuevo veh√≠culo de pasajeros para ser adicionado a la flota de
            veh√≠culos de la empresa
        pos : int
            Es el n√∫mero de la posici√≥n en la que se requiere registrar el
            veh√≠culo dentro de la flota, comenzando desde 0

            Ejemplo: Si el tama√±o m√°ximo de la flota es de 6 y actualmente
            se tiene 4 veh√≠culos:
                [ 0   1   2   3]
                [üõ∫, üöó, üöô, üõª]
            Se desea registrar üöö en la posici√≥n 2, entonces la flota queda:
                [ 0   1   2   3   4]
                [üõ∫, üöó, üöö, üöô, üõª]
            Ahora, si se desea registrar üöê en la posici√≥n 5, la flota queda:
                [ 0   1   2   3   4   5]
                [üõ∫, üöó, üöö, üöô, üõª, üöê]
            Cualquier nuevo registro en una determinada posici√≥n ya no es
            posible, porque ya se alcanz√≥ el l√≠mite m√°ximo de la flota

        Returns
        -------
        bool
            True si el nuevo veh√≠culo se pudo agregar a la flota en la
            posici√≥n determinada. False en caso contrario
        """
        suma = 0
        for digito in range(len(nuevo_vp.cod_registro)-1): 
            suma += int(digito)
        while suma % 10 != int(nuevo_vp.cod_registro[-1]):
            return False

        for vehiculo_registrado in self.vehiculos_registrados:
            if vehiculo_registrado.cod_registro == nuevo_vp.cod_registro:
                return False

        if len(self.vehiculos_registrados) + 1 > self.max_vehiculos:
            return False
        else:
            self.vehiculos_registrados.insert(pos, nuevo_vp)
            return True

        
        
        
        

    # M√©todo ET # 3
    def despachar_VP(self, vehiculo_tp):
        """M√©todo que realiza el despacho de un veh√≠culo de pasajeros. Un
        veh√≠culo de pasajeros, cada vez que es despachado, implica que su
        n√∫mero de viajes de debe incrementar en una unidad

        Parameters
        ----------
        vehiculo_tp : VehiculoPasajeros
            El veh√≠culo de pasajeros al cual se le incrementar√° su n√∫mero de
            viajes

        Returns
        -------
        VehiculoPasajeros|None
            El veh√≠culo de pasajeros al cual se le increment√≥ el n√∫mero de
            viajes o None, cuando el veh√≠culo de pasajeros no pertenece a la
            flota
        """
        
        if vehiculo_tp in self.vehiculos_registrados:
            vehiculo_tp.numero_de_viajes += 1
            return vehiculo_tp
        else:
            return None

    # M√©todo ET # 4
    def mini_flota_marca(self, marca):
        """Este m√©todo crea una lista con todos los veh√≠culos de pasajeros que
        pertenezcan a la flota y que sean de una determinada marca

            Parameters
        ----------
        marca : str
            El nombre de la marca a buscar en la flota

        Returns
        -------
        Lista Python
            Una lista con los veh√≠culos de pasajeros que sean de la marca
            especificada y que pertenezcan actualmente a la flota
        """


        return [x for x in self.vehiculos_registrados if x.marca == marca]
        

    # M√©todo ET # 5
    def desvincular_VP(self, vehiculo_tp):
        """M√©todo que permite eliminar un veh√≠culo de pasajeros de la flota
        actual de la empresa

        Parameters
        ----------
        vehiculo_tp : VehiculoPasajeros
            Es el veh√≠culo de pasajeros que se desea desvincular de la empresa

        Returns
        -------
        bool
            True si el veh√≠culo es desvinculado de la flota. False en caso
            contrario
        """
        if vehiculo_tp in self.vehiculos_registrados:
            self.vehiculos_registrados.remove(vehiculo_tp)
            return True
        else:
            return False
            

    # M√©todo ET # 6
    def __len__(self):
        """M√©todo que retorna el n√∫mero de veh√≠culos de pasajeros que se
        encuentran actualmente registrados en la flota de la empresa

        Returns
        -------
        int
            El n√∫mero actual de veh√≠culos que posee la flota de la empresa
        """
        numero = len(self.vehiculos_registrados)
        return numero

    # M√©todo ET # 7
    def __str__(self):
        """M√©todo que retorna la cadena de presentaci√≥n de la empresa de
        transporte

        Returns
        -------
        str
            Una cadena de presentaci√≥n en dos l√≠neas de la empresa de
            transporte, utilizando el siguiente formato:
            "Empresa:nombre de empresa transporte/NIT:nit de la empresa
             M√°x Veh√≠culos:<n√∫mero m√°ximo de veh√≠culos>"

            Por ejemplo:
            "Empresa:Team ACME/NIT:123
             M√°x Veh√≠culos:<5>"
        """
        return f"Empresa:{self.nombre}/NIT:{self.nit}\nM√°x Veh√≠culos:<{self.max_vehiculos}>"


    # M√©todo ET # 8
    def la_flota(self):
        """M√©todo que retorna una cadena con todos los veh√≠culos de pasajeros
        pertenecientes a la flota de la empresa

        Returns
        -------
        str
            Una cadena con el siguiente formato:
            "{[presentaci√≥n_veh√≠culo_0] -> [presentaci√≥n_veh√≠culo_1] -> [presentaci√≥n_veh√≠culo_2] -> ... -> [presentaci√≥n_veh√≠culo_n]}"
            En caso de que la flota no tenga ning√∫n veh√≠culo registrado, se retornar√°:
            "{}"
        """

        presentacion = []

        if not self.vehiculos_registrados:
            return "{}"
        else:
            for vehiculo in self.vehiculos_registrados:
                presentacion.append(f"[{vehiculo.cod_registro}:{vehiculo.marca}:{vehiculo.capacidad_maxima}:{vehiculo.numero_de_viajes}]")

        for i in presentacion:
            if i >= 1 and i < len(presentacion):
                presentacion[i] = presentacion[i] + " -> "

        return "{".join(presentacion) + "}"

        

