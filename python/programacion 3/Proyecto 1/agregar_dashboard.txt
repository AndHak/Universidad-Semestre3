dic_usuarios = {
    'andresfg13789@gmail.com': [
        'Andres',
        'Guerra',
        '2567AndresG',
        [
            {
                "texto": "Reunión de equipo",
                "fecha": "2024-06-01",
                "hora": "10:00 AM",
                "lugar": "Oficina",

            },
            {
                "texto": "Entrega de informe",
                "fecha": "2024-06-03",
                "hora": "09:00 AM",
                "lugar": "Cliente",
            }
        ],
        {}
    ]
}

aqui son lo que cambie de la clase MainApp

señales en el init-----------------

#señales recordatorio
self.check_box_hora_recordatorio.stateChanged.connect(self.activar_fecha_hora)
self.agregar_recordatorio_button.clicked.connect(self.agregar_recordatorio)
self.checkbox_lugar_recordatorio.stateChanged.connect(self.activar_line_lugar_recordatorio)
self.eliminar_recordatorio_button.clicked.connect(self.borrar_recordatorio)

-------------------------------------------------------------------

funciones de la clase Mainapp ----------------------------------

estas son nuevas---------------------------------------------------------
def agregar_recordatorio(self):
    texto = self.text_edit_recordatorio.toPlainText()
    fecha = self.lineedit_fecha_recordatorio.text().strip()
    hora = self.lineedit_hora_recordatorio.text().strip()
    formato = self.am_pm_hora_recordatorio.currentText()
    lugar = self.lineedit_lugar_recordatorio.text()

    if texto:
        # Crear el recordatorio
        if self.check_box_hora_recordatorio.isChecked():
            if self.validar_fecha_hora(fecha, hora, formato, "Recordatorio"):
                if self.checkbox_lugar_recordatorio.isChecked():
                    if lugar:
                        recordatorio_info = {
                            "texto": texto,
                            "fecha": fecha,
                            "hora": hora,
                            "lugar": lugar
                        }
                    else:
                        self.mostrar_warning("Si activaste el lugar no debe quedar vacío")
                        return  # Salir de la función si no se cumple la condición
                else:
                    recordatorio_info = {
                        "texto": texto,
                        "fecha": fecha,
                        "hora": hora
                    }
        elif self.checkbox_lugar_recordatorio.isChecked():
            if lugar:
                recordatorio_info = {
                    "texto": texto,
                    "lugar": lugar
                }
            else:
                self.mostrar_warning("Si activaste el lugar no debe quedar vacío")
                return  # Salir de la función si no se cumple la condición
        else:
            recordatorio_info = {"texto": texto}

        # Agregar el recordatorio al diccionario de usuarios
        email_usuario = self.email_edit_profile_2.text()
        if email_usuario in dic_usuarios:
            dic_recordatorios = dic_usuarios[email_usuario][3]
            dic_recordatorios.append(recordatorio_info)
        else:
            self.mostrar_warning("Usuario no encontrado en el diccionario de usuarios")
            return  # Salir de la función si el usuario no está en el diccionario

        # Actualizar la lista de recordatorios en la interfaz
        self.cargar_recordatorios()

        msg_box = QMessageBox()
        msg_box.setIcon(QMessageBox.Information)
        msg_box.setText("Recordatorio creado con exito")
        msg_box.setWindowTitle("Recordatorio")

        # Cambiar el tamaño del QMessageBox
        msg_box.resize(300, 200)

        # Cambiar el estilo del botón
        msg_box.setStyleSheet("""
            QPushButton {
                min-width: 30px;
                min-height: 15px;
            }
        """)
        ok = msg_box.exec()
        if ok:
            self.mostrar_pagina_recordatorios()
    else:
        self.mostrar_warning("El recordatorio no debe quedar vacío")

def cargar_recordatorios(self):
    # Limpiar la lista de recordatorios antes de cargar nuevos
    self.lista_agregar_recordatorios.clear()

    # Obtener el correo electrónico del usuario actual
    email_usuario = self.email_edit_profile_2.text()

    # Verificar si el usuario está en el diccionario de usuarios
    if email_usuario in dic_usuarios:
        # Obtener la lista de recordatorios del usuario
        recordatorios_usuario = dic_usuarios[email_usuario][3]

        # Iterar sobre los recordatorios del usuario y crear widgets para cada uno
        for recordatorio_info in recordatorios_usuario:
            texto = recordatorio_info.get("texto", "")
            fecha = recordatorio_info.get("fecha", "")
            hora = recordatorio_info.get("hora", "")
            lugar = recordatorio_info.get("lugar", "")

            # Crear un widget RecordatorioWidget para el recordatorio actual
            recordatorio_widget = RecordatorioWidget(texto, fecha, hora, lugar)

            # Agregar el widget a la lista en la interfaz
            recordatorio_widget.setMinimumHeight(90)
            item = QListWidgetItem()  # Crear un ítem de lista
            item.setSizeHint(recordatorio_widget.sizeHint())  # Establecer el tamaño del ítem
            self.lista_agregar_recordatorios.addItem(item)  # Agregar el ítem a la lista
            self.lista_agregar_recordatorios.setItemWidget(item, recordatorio_widget)  # Asociar el widget con el ítem
    else:
        # Mostrar un mensaje si el usuario no está en el diccionario de usuarios
        self.mostrar_warning("Usuario no encontrado en el diccionario de usuarios")

def borrar_recordatorio(self):
    recordatorio_a_borrar = self.lista_agregar_recordatorios.currentItem()
    if recordatorio_a_borrar:
        confirmacion = QMessageBox.question(self, "Confirmar eliminación", "¿Seguro que quiere eliminar este recordatorio?", QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
        if confirmacion == QMessageBox.StandardButton.Yes:
            self.lista_agregar_recordatorios.takeItem(self.lista_agregar_recordatorios.row(recordatorio_a_borrar))
    else:
        self.mostrar_warning("Para borrar un recordatorio primero lo debe seleccionar")

    
def activar_fecha_hora(self):
    if self.check_box_hora_recordatorio.isChecked():
        self.lineedit_hora_recordatorio.setEnabled(True)
        self.lineedit_fecha_recordatorio.setEnabled(True)
        self.am_pm_hora_recordatorio.setEnabled(True)
    else:
        self.lineedit_hora_recordatorio.setEnabled(False)
        self.lineedit_fecha_recordatorio.setEnabled(False)
        self.am_pm_hora_recordatorio.setEnabled(False)
        self.lineedit_hora_recordatorio.clear()
        self.lineedit_fecha_recordatorio.clear()
        self.checkbox_lugar_recordatorio.setChecked(False)
        self.check_box_hora_recordatorio.setChecked(False)


def activar_line_lugar_recordatorio(self):
    if self.checkbox_lugar_recordatorio.isChecked():
        self.lineedit_lugar_recordatorio.setEnabled(True)
    else:
        self.lineedit_lugar_recordatorio.setEnabled(False)
        self.lineedit_lugar_recordatorio.clear()

finaliza nuevas -------------------------------------------------------------------------------------------

estas son las que ya tenias pero les cambie unas cosas----------------------------------------------------

def mostrar_pagina_recordatorios(self):
        self.notifications_stacked.setCurrentIndex(0)
        self.lineedit_hora_recordatorio.clear()
        self.lineedit_fecha_recordatorio.clear()
        self.text_edit_recordatorio.clear()
        self.checkbox_lugar_recordatorio.setChecked(False)
        self.check_box_hora_recordatorio.setChecked(False)


def mostrar_pagina_notificaciones(self):
    self.stackedWidget.setCurrentWidget(self.notifications_page)
    self.cargar_recordatorios()

---------------------------------------------------------------------------------------------------------------

esta es la clase RecordatoriosWidget que va en el archivo clase_widgets--------------------------------------------


class RecordatorioWidget(QWidget):
    def __init__(self, asunto, fecha=None, hora=None, lugar=None):
        super().__init__()
        
        # Estilos para el widget
        self.setStyleSheet("""
            QWidget {
                background-color: #f5f5f5;
                border-radius: 10px;
                padding: 10px;
            }
            QLabel {
                font-family: "Arial", sans-serif;
            }
            QLabel[objectName^="label_"] {
                font-weight: bold;
            }
        """)

        # Diseño horizontal
        layout = QHBoxLayout(self)

        # Primer cuadro: Asunto
        asunto_layout = QVBoxLayout()

        asunto_label = QLabel("Asunto")
        asunto_label.setObjectName("label_asunto_title")
        asunto_label.setStyleSheet("color: #2196F3;")
        asunto_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        asunto_label.setWordWrap(True)
        asunto_layout.addWidget(asunto_label)

        asunto_value_label = QLabel(f"{asunto}")
        asunto_value_label.setObjectName("label_asunto_value")
        asunto_value_label.setStyleSheet("color: #2196F3;")
        asunto_value_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        asunto_value_label.setWordWrap(True)
        asunto_layout.addWidget(asunto_value_label)

        layout.addLayout(asunto_layout)

        # Segundo cuadro: Fecha
        if fecha:
            fecha_layout = QVBoxLayout()

            fecha_label = QLabel("Fecha")
            fecha_label.setObjectName("label_fecha_title")
            fecha_label.setStyleSheet("color: #FF9800;")
            fecha_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
            fecha_label.setWordWrap(True)
            fecha_layout.addWidget(fecha_label)

            fecha_value_label = QLabel(f"{fecha}")
            fecha_value_label.setObjectName("label_fecha_value")
            fecha_value_label.setStyleSheet("color: #FF9800;")
            fecha_value_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
            fecha_value_label.setWordWrap(True)
            fecha_layout.addWidget(fecha_value_label)

            layout.addLayout(fecha_layout)

        # Tercer cuadro: Hora
        if hora:
            hora_layout = QVBoxLayout()

            hora_label = QLabel("Hora")
            hora_label.setObjectName("label_hora_title")
            hora_label.setStyleSheet("color: #FF5722;")
            hora_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
            hora_label.setWordWrap(True)
            hora_layout.addWidget(hora_label)

            hora_value_label = QLabel(f"{hora}")
            hora_value_label.setObjectName("label_hora_value")
            hora_value_label.setStyleSheet("color: #FF5722;")
            hora_value_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
            hora_value_label.setWordWrap(True)
            hora_layout.addWidget(hora_value_label)

            layout.addLayout(hora_layout)

        # Cuarto cuadro: Lugar
        if lugar:
            lugar_layout = QVBoxLayout()

            lugar_label = QLabel("Lugar")
            lugar_label.setObjectName("label_lugar_title")
            lugar_label.setStyleSheet("color: #4CAF50;")
            lugar_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
            lugar_label.setWordWrap(True)
            lugar_layout.addWidget(lugar_label)

            lugar_value_label = QLabel(f"{lugar}")
            lugar_value_label.setObjectName("label_lugar_value")
            lugar_value_label.setStyleSheet("color: #4CAF50;")
            lugar_value_label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
            lugar_value_label.setWordWrap(True)
            lugar_layout.addWidget(lugar_value_label)

            layout.addLayout(lugar_layout)
